## ⭐OSI 7계층

---

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1843725a-a943-4fb7-8da1-6bd09326db66/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2e06f3b9-c403-4089-9ff2-bf7d938cf539/Untitled.png)

## 1. 물리 계층

---

- 물리 계층에서 전송되는 데이터의 전기적인 신호화와 전송 매체의 기계적, 전기적 성질에 관여한다.

→ 데이터를 전기적인 아날로그 신호로 변환하여 주고 받는다.

- **정보 전달**을 주로 하기 때문에 알고리즘 , 오류제어 X

| 전송 단위 | Bit |
| --- | --- |
| 장비 | 허브 , 리피터 |
| 프로토콜 | 이더넷 , 모뎀 |

## 2. 데이터 링크 계층

---

- 장비의 고유 MAC 주소를 이용해서 노드와 노드 데이터를 전송하는 계층
- **주요 기능 : 정보의 오류와 흐름을 관리하여 안정된 정보를 전달한다.**

1. IP 주소를 가지고 MAC 주소를 찾아주는 : ARP
2. MAC 주소를 가지고 IP 주소를 찾는 : RARP

| 전송 단위 | 프레임 |
| --- | --- |
| 장비 | 브리지 . 스위치 |
| 프로토콜 | MAC , PPP |

### 특징

- **1. 프레임**
    - [ ]  **Frame**이란 2 계층에서 전송되는 데이터 단위(유,무선으로 연결된 장치 간에 전송되는 데이터 단위)
    - Frame의 구성
        1. Header : 소스 , 대상 Mac주소 , 프레임 유형 , 시퀀스 번호 → 프레임을 식별하는 정보
        2. Payload : IP 패킷과 같이 전송되는 실제 데이터 포함
        3. Trailer : 수신기가 전송 중에 발생했을 수 있는 모든 오류 감지 정보를 포함 (CRC)
    
    - [ ]  **Framing**
    - 각 프레임의 시작과 끝을 구별하고 프레임의 소스와 목적지를 식별
    
    1. **문자 중심 프레임** : 각 문자의 시작과 끝을 구분하기 위해 문자 앞에 시작 , 중지 비트
    - HDLC 프로토콜
    
    1. 비트 지향 프레임 : 데이터를 개별 비트로 전송되는 비동기 직렬 통신에 사용 →  고유한 비트 시퀀스에 각 프레임의 시작과 끝을 나타낸다.
    - PPP프로토콜

**2. 스위치**

- Mac주소를 기반으로 패킷을 전달
- MAC주소 데이블에 가지고 있는 정보를 이용하여 통신이 시작되면 자신이 알고 있는 위치로 패킷을 보낸다.
- 플러디 , 어드레스 러닝 , 포워딩

3.**오류 제어**

- 패리티 비트 검사 , 해밍 부호 검사

4.**흐름 제어**

- 데이터 링크 계층은 송신자와 수신자 사이의 데이터 프레임의 흐름을 제어하여 수신자가 너무 많은 프레임에 압도되는 것을 방지한다

→ 버퍼링 , 슬라이딩 윈도우 , 혼잡 제어와 같은 흐름제어 메커니즘 수행

## 3. 네트워크 계층

---

- 중계노드를 통하여 전송하는 경우 어떻게 중계할지 설정
- **데이터를 목적지까지 가장 안정하고 빠르게 전달하는 기능( 라우팅 )**

### 2계층과 3계층의 차이점

- 네트워크 계층은 서로 다른 두 네트워크간의 전송
- 데이터링크 → 같은 네트워크의 전송

**요약**

1. 패킷(IP+data)에 IP주소를 이용하여 다음 라우터로 가는 길을 찾다. (라우팅)
2. 자신 다음의 라우터에게 데이터를 넘겨준다. (포워딩)

- 주소부여(IP) , 경로설정(Route)

| 전송 단위 | 패킷 |
| --- | --- |
| 장비 | 라우터 , L3 스위치 |
| 프로토콜 | IP , ICMP , DDP |

### 1. **라우터의 동작 방식과 역할**

1. `경로 지정` : 다양한 경로 수집 → 라우팅 테이블에 저장 → 패킷이 들어오면 도착지IP주소를 라우팅 테이블과 비교해 최선의 경로로 패킷을 보낸다.
- [ 더 보기 ]
    - 정적 , 동적 라우팅을 통하여 최적의 경로를 라우팅 테이블에 저장
    - 경로에 맞게 홉-바이-홉 , 넥스트 홉 방식을 통하여 경로 이동

1. `브로드캐스트 컨트롤` : 들어온 패킷의 목적지 주소가 라우팅 테이블에 없으면 패킷을 버린다.

1. `프로토콜 변환` : 패킷 포워딩 과정에서 기존 2계층 헤더 정보를 제거 새로운 2계층 헤더 생성

## 4. 전송 계층

---

- **포드 번호**를 사용해서 도착지 컴퓨터의 최종 도착지의 프로세스에 도달하게 하는 모듈
- 애플리케이션과 인터넷 계층 사이의 데이터가 전달될 때 중계 역활을 한다.

기능

1. 세그멘테이션
- [ 더 보기]
1. 흐름제어
- [ 더 보기]
    - STOP&Wait
    - 슬라이딩 윈도우
1. 오류제어
- [ 더 보기]
    
    FEC , BEC , ARQ
    
    ### 2계층의 오류제어 차이점
    
    - Data Link Layer의 오류 제어는 프레임이 만약에 오류가 나면 그냥 삭제
    - 전송 계층에서는 해당 데이터가 없으면 다시 보내줌 → 오류를 복구

| 전송 단위 | Segment |
| --- | --- |
| 장비 | L4 스위치 |
| 프로토콜 | TCP , UDP , ARP |

- TCP / UDP
1. TCP
    - 연결지향 프로토콜을 사용 , 수신 여부를 확인(신뢰성) , 가상회선 패킷 교환 방식

1. UDP
    - 순서를 보장하지 않고 수신 여부를 확인 X , 단순히 데이터만 주는 데이터그램 패킷 교환 방식

### **가상회선 패킷 교환 방식**

- 각 패킷에는 가상회선 식별자가 포함되며 모든 패킷을 전송하면 가상회선이 해제되고 패킷들은 전송된 순서대로 도착하는 방식

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/00c35616-e7ca-404b-8663-960f371bb1fc/Untitled.png)

### **데이터그램 패킷 교환 방식**

- 독립적으로 이동하며 최적의 경로를 선택하여 하나의 메시지에서 분할된 여러 패킷은 서로 다른 경로로 전송될 수 있다. → 순서가 다를 수 있다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b9e4259e-4bcd-41a1-b90c-12a68786c6a0/Untitled.png)

### TCP 연결 (3-웨이 핸드셰이크)

---

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/519c4ff8-244f-42e3-9987-d4bb94e99fa8/Untitled.png)

- 단어
    
    `SYN`
    
    - SYNchronization의 약자 → 연결 요청 플래그
    
    `ACK`
    
    - 응답 플래그
    
    `ISN`
    
    - 초기 네트워크 연결할 때 할당된 고유 시퀀스 번호
    
    `TCP Header`
    
    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/64471cb3-24b7-4848-be34-d9043ebe8049/Untitled.png)
    

TCP : 연결을 확립하기 위해 패킷 요청을 3번 요청하는 작업을 가진다.

1. `SYN 단계` : CL서버는 ISN을 담아 서버에 연결 확립을 해달라고 요청(SYN한다.)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/593c59fe-3ac0-4454-94d2-83c96c1ec89a/Untitled.png)

→ SYNchronize 비트가 활성화 → 1로 바뀐 세그먼트를 전송한다.

1. `SYN+ACK`:서버는 CL의 SYN 요청을 수신하고 서버의 ISN을 보내며 승인번호로 CL의 ISN+1을 보냄

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/728e4b65-fd27-4080-889d-43e3bc8d4767/Untitled.png)

→ ACK와 SYN이 1인 세그먼트를 CL에게 보낸다.

1. ACK : 클라이언트는 서버의 ISN+1한 값인 승인번호를 담아 ACK를 서버로 보낸다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2441b1e8-44ea-4755-9d97-9214bd200a7e/Untitled.png)

 **TCP 해제 (4 -웨이 핸드셰이크)**

---

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/169b3c3b-07b2-49e6-90b5-11478a470b03/Untitled.png)

<aside>
💡 Time_WAIT이란 소켓이 바로 소멸되지 않고 일정 시간 유지되는 상태 → 지연 패킷 문제 해결

</aside>

1. CL가 연결을 종료하겠다고 FIN 플래그를 전송한다.
    1. 이후 CL은 FIN_WAIT_1 상태로 돌아가고 서버의 응답을 기달린다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/48a94d8f-1478-45ba-bb35-4a08817d2f29/Untitled.png)

1. 서버는 CL에게 ACK 승인 세그먼트를 보낸다.
    1. CLOSE_WAIT 상태에 들어간다.
    2. CL가 세그먼트를 반으면 FIN_WAIT_2 상태로 들어간다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/44cf912a-cf3b-4eca-8d22-7e77e8c16fa5/Untitled.png)

1. 서버는 ACK를 보낸 이후에 일정 시간이 지나면 FIN세그먼트를 날린다.
    1. CL는 TIME_WAIT 상태가 된다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d773b0b4-1b49-40ee-8c2b-bf2e0abcc8e4/Untitled.png)

1. CL는 서버로 다시 ACK를 보내 서버를 CLOSE 상태로 만들고 일정 시간 이후에는 CL과 서버의 연결이 해제된다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a882fe09-f8b4-44ff-a749-ba36d164dc4f/Untitled.png)

## 5. 세션 계층

---

- 두 개 이상의 장치 간 통신 세션을 설정 , 유지 및 종료하는 것

| 프로토콜 | SSH |
| --- | --- |

세션 계층은 장치 간의 통신 세션을 설정, 관리 및 종료하는 역할을 합니다. 네트워크의 장치 간에 데이터가 정확하고 안전하게 전송되도록 하는 데 중요한 역할을 합니다.

## 6. 표현 계층

---

프레젠테이션 계층은 데이터를 수신 장치가 이해할 수 있는 형식으로 변환하는 역할을 한다. 여기에는 데이터 `암호화/복호화` 및 압축이 포함됩니다.

| 프로토콜 | JPEG |
| --- | --- |

## 7. 응용 계층

---

애플리케이션 계층은 최종 사용자에게 네트워크 서비스를 제공할 책임이 있습니다. 여기에는 이메일, 파일 전송 및 웹 검색과 같은 서비스가 포함됩니다.

| 프로토콜 | HTTP / FTP /SMTP / TELNET |
| --- | --- |
